// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(auto()) @map("_id") @db.ObjectId
  supaId                   String                    @unique
  name                     String
  email                    String                    @unique
  number                   String?
  photo                    String?
  is_phone_number_verified Boolean                   @default(false)
  Monitor_config           Monitor_config[]
  workspace                WorkSpace[]
  workspace_users          WorkSpace_users[]
  teams                    team[]
  alert                    alert[]
  escalation_policy_rules  escalation_policy_rules[]
  user_otp                 user_otp[]
  team_schedule_rotation   team_schedule_rotation[]
}

model user_otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  invalid   Boolean  @default(false)
  expiresAt Int
  createdAt DateTime @default(now())
}

model Monitor_config {
  id                        String                     @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String                     @db.ObjectId
  user                      User                       @relation(fields: [userId], references: [id])
  name                      String?
  monitorType               String
  is_active                 Boolean                    @default(true)
  workspaceId               String?                    @db.ObjectId
  workspace                 WorkSpace?                 @relation(fields: [workspaceId], references: [id])
  Monitor_HTTP_gPRC_config  Monitor_HTTP_gPRC_config?
  Monitor_SSL_config        Monitor_SSL_config?
  Monitor_System_components Monitor_System_components?
  teamId                    String?                    @db.ObjectId
  team                      team?                      @relation(fields: [teamId], references: [id])
  alert                     alert[]
  createdAt                 DateTime                   @default(now())
}

model Monitor_HTTP_gPRC_config {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  monitor_configId      String         @unique @db.ObjectId
  monitor_config        Monitor_config @relation(fields: [monitor_configId], references: [id], onDelete: Cascade) // Add cascade delete
  authType              String
  interval_check        String?
  userName              String?
  password              String?
  inital_token          String?
  refresh_token         String?
  header_key            String?
  header_value          String?
  endpoint_url          String?
  failure_count         String?
  success_count         String?
  success_response_code String?
}

model Monitor_SSL_config {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  monitor_configId   String         @unique @db.ObjectId
  monitor_config     Monitor_config @relation(fields: [monitor_configId], references: [id], onDelete: Cascade)
  endpoint_url       String?
  alt_names          String?
  is_wildcard        Boolean        @default(false)
  wildcard_url       String?
  certifcate_issue   DateTime?
  certificate_tenure String?
  expiry_reminder    String?
}

model Monitor_System_components {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  monitor_configId  String         @unique @db.ObjectId
  monitor_config    Monitor_config @relation(fields: [monitor_configId], references: [id], onDelete: Cascade)
  components_lists  String[]       @default([])
  is_cloud          Boolean        @default(false)
  cloud_service_url String?
  cloud_userName    String?
  cloud_password    String?
  cloud_downloadUrl String?
}

model WorkSpace {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  ownerId            String            @db.ObjectId
  owner              User              @relation(fields: [ownerId], references: [id])
  workspace_name     String            @unique
  trial_startDate    DateTime          @default(now())
  trial_endDate      DateTime
  subscription_start DateTime?
  subscription_end   DateTime?
  monitor_config     Monitor_config[]
  workspace_users    WorkSpace_users[]
  invited_users      invited_users[]
  team               team[]
  team_member        team_member[]
  alert              alert[]
}

model invited_users {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  invited_user_name     String
  invited_user_email_id String    @unique
  invited_by            String
  workspaceId           String    @db.ObjectId
  wokspace              WorkSpace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role                  Role
  status                status
  invited_on            DateTime  @default(now())
}

model WorkSpace_users {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String        @db.ObjectId
  workspace   WorkSpace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  role        Role          @default(owner)
  team_member team_member[]
  createdAt   DateTime      @default(now())
}

model team {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  creatorId               String                    @db.ObjectId
  creator                 User                      @relation(fields: [creatorId], references: [id])
  workspaceId             String                    @db.ObjectId
  workspace               WorkSpace                 @relation(fields: [workspaceId], references: [id])
  teamName                String
  description             String?
  team_member             team_member[]
  monitor_config          Monitor_config[]
  team_escalationpolicy   team_escalationpolicy[]
  createdAt               DateTime                  @default(now())
  escalation_policy_rules escalation_policy_rules[]
  team_schedule           team_schedule[]
}

model team_member {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  teamId           String          @db.ObjectId
  team             team            @relation(fields: [teamId], references: [id])
  workspace_userId String          @db.ObjectId
  workspace_user   WorkSpace_users @relation(fields: [workspace_userId], references: [id])
  workspaceId      String          @db.ObjectId
  workspace        WorkSpace       @relation(fields: [workspaceId], references: [id])
}

model alert {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  acknowledged     Boolean        @default(false)
  monitor_configId String         @db.ObjectId
  monitor_config   Monitor_config @relation(fields: [monitor_configId], references: [id], onDelete: Cascade)
  userId           String?        @db.ObjectId
  user             User?          @relation(fields: [userId], references: [id])
  workspaceId      String         @db.ObjectId
  workspace        WorkSpace      @relation(fields: [workspaceId], references: [id])
  createdAt        DateTime       @default(now())
}

model team_escalationpolicy {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  teamId                  String                    @db.ObjectId
  team                    team                      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  escalationplicy_name    String
  isActive                Boolean                   @default(true)
  description             String?
  createdAt               DateTime                  @default(now())
  escalation_policy_rules escalation_policy_rules[]
}

model escalation_policy_rules {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  team_escalation_policy  team_escalationpolicy @relation(fields: [team_escalationpolicyId], references: [id])
  team_escalationpolicyId String                @db.ObjectId
  alert_status            String
  minutes_after_creation  Int
  notification_type       notification_type
  userId                  String?               @db.ObjectId
  user                    User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheudleId              String?               @db.ObjectId
  teamId                  String?               @db.ObjectId
  team                    team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  is_active               Boolean               @default(true)
}

model team_schedule {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  teamId                 String                   @db.ObjectId
  team                   team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  name                   String
  createdAt              DateTime                 @default(now())
  team_schedule_rotation team_schedule_rotation[]
  team_schedule_override team_schedule_override[]
}

model team_schedule_rotation {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  team_scheduleId        String        @db.ObjectId
  team_schedule          team_schedule @relation(fields: [team_scheduleId], references: [id], onDelete: Cascade)
  name                   String
  userId                 String        @db.ObjectId
  user                   User          @relation(fields: [userId], references: [id])
  starts_on              DateTime      @default(now())
  frequency              Frequency
  ends_on                DateTime?
  custom_start_date_time DateTime?
  custom_end_date_time   DateTime?
  restrict_time_type     Restriction?
  restrict_time_start    DateTime?
  restrict_time_end      DateTime?
}

model team_schedule_override {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  team_scheduleId String        @db.ObjectId
  team_schedule   team_schedule @relation(fields: [team_scheduleId], references: [id], onDelete: Cascade)
  name            String
  start_time      DateTime
  end_time        DateTime?
}

model contactUs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  phoneNumber String
  email       String
  createdAt   DateTime @default(now())
}

enum MonitorTypes {
  Http_gRPC
  SSL
  Nginx
  ErrorCode
}

enum AuthType {
  JWT
  Basic
}

enum Role {
  owner
  admin
  user
  stackholder
}

enum status {
  verified
  unverified
}

enum notification_type {
  user
  on_call
  team
  members
  admin
  notify_users
}

enum Frequency {
  daily
  weekly
  custom
}

enum Restriction {
  time_of_day
  weekday
}
